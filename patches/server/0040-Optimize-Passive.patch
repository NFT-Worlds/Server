From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jacob <jacob@stellardev.org>
Date: Wed, 19 Jan 2022 16:16:47 -0700
Subject: [PATCH] Optimize Passive


diff --git a/src/main/java/com.nftworlds/NFTWorldsConfig.java b/src/main/java/com.nftworlds/NFTWorldsConfig.java
index 6f5c676e98d56d8e717aa3c934f553f67b076146..393d10c490e61672a34b9075e1a17395b77b1930 100644
--- a/src/main/java/com.nftworlds/NFTWorldsConfig.java
+++ b/src/main/java/com.nftworlds/NFTWorldsConfig.java
@@ -136,7 +136,21 @@ public class NFTWorldsConfig {
     public static boolean tpsGraph = true;
     private static void tpsGraph() { tpsGraph = getBoolean("tps-graph", true); }
 
+    public static boolean limitPassiveMobs = true;
 
+    private static void limitPassiveMobs() {
+        limitPassiveMobs = getBoolean("limit-passive-mobs", true);
+    }
+
+    public static boolean entityQueue = true;
+    private static void entityQueue() {
+        entityQueue = getBoolean("entity-queue.enabled", true);
+    }
+
+    public static int entityQueueMS = 30;
+    private static void entityQueueMS() {
+        entityQueueMS = getInt("entity-queue.ms", 30);
+    }
 
 
 
diff --git a/src/main/java/com.nftworlds/RecommendCommand.java b/src/main/java/com.nftworlds/RecommendCommand.java
index d697aa2b18e13026a9377e990d966e7dcf924fb9..37d4a01008f58ee8d3df6f38d3d0a7b87670ae61 100644
--- a/src/main/java/com.nftworlds/RecommendCommand.java
+++ b/src/main/java/com.nftworlds/RecommendCommand.java
@@ -62,7 +62,15 @@ public class RecommendCommand extends Command {
         ArrayList<String> changes = new ArrayList<>();
 
         if (config.equalsIgnoreCase("nftworlds")) { //NFTWorlds
-
+            if (!NFTWorldsConfig.limitPassiveMobs) {
+                changes.add("limit-passive-mobs §7|§f§o Change to §a§lTRUE");
+            }
+            if (!NFTWorldsConfig.entityQueue) {
+                changes.add("entity-queue.enabled §7|§f§o Change to §a§lTRUE");
+            }
+            if (NFTWorldsConfig.entityQueueMS > 30) {
+                changes.add("entity-queue.ms §7|§f§o Change to §c§l30 or less");
+            }
         } else if (config.equalsIgnoreCase("airplane")) { //Airplane
             if (!AirplaneConfig.dearEnabled) {
                 changes.add("dab.enabled §7|§f§o Change to §a§lTRUE");
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index d1b41bcd4120e39621f67dc7f431d883612d3e50..2d2c4e2a6666d14c8e9cfaedc5af94f6106a3951 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -288,6 +288,10 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     private final StructureManager structureManager;
     protected WorldData worldData;
 
+    public static long tickStart = System.currentTimeMillis(); // NFTWorlds - entity queue
+    public static boolean foundEnd = false; // Whether there was an abrupt ending or not
+    public static boolean bypassAIThisTick = false;
+
     // CraftBukkit start
     public DataPackConfig datapackconfiguration;
     public org.bukkit.craftbukkit.CraftServer server;
@@ -1247,6 +1251,14 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 long start = System.nanoTime(), curTime, tickSection = start; // Paper - Further improve server tick loop
                 lastTick = start - TICK_TIME; // Paper
                 while (this.running) {
+                    this.tickStart = System.currentTimeMillis();
+                    if (!this.foundEnd) {
+                        this.bypassAIThisTick = true;
+                    } else {
+                        this.bypassAIThisTick = false;
+                    }
+                    this.foundEnd = false;
+
                     long i = ((curTime = System.nanoTime()) / (1000L * 1000L)) - this.nextTickTime; // Paper
 
                     if (i > 5000L && this.nextTickTime - this.lastOverloadWarning >= 30000L) { // CraftBukkit
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 0ed010c44d3994d17df57c17e38bd9ac2dfd3442..635525254e53e2f7e17c33c56f467de8f040f4eb 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -20,6 +20,8 @@ import java.util.Random;
 import java.util.UUID;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
+
+import com.nftworlds.NFTWorldsConfig;
 import net.minecraft.BlockUtil;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.commands.arguments.EntityAnchorArgument;
@@ -45,6 +47,7 @@ import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
 import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerChunkCache;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
@@ -80,8 +83,14 @@ import net.minecraft.world.entity.ai.targeting.TargetingConditions;
 import net.minecraft.world.entity.animal.Animal;
 import net.minecraft.world.entity.animal.FlyingAnimal;
 import net.minecraft.world.entity.animal.Wolf;
+import net.minecraft.world.entity.animal.horse.Horse;
 import net.minecraft.world.entity.boss.wither.WitherBoss;
 import net.minecraft.world.entity.item.ItemEntity;
+import net.minecraft.world.entity.monster.ElderGuardian;
+import net.minecraft.world.entity.monster.Guardian;
+import net.minecraft.world.entity.monster.Monster;
+import net.minecraft.world.entity.monster.Phantom;
+import net.minecraft.world.entity.npc.Villager;
 import net.minecraft.world.entity.projectile.AbstractArrow;
 import net.minecraft.world.food.FoodProperties;
 import net.minecraft.world.item.ArmorItem;
@@ -262,6 +271,7 @@ public abstract class LivingEntity extends Entity {
     public boolean bukkitPickUpLoot;
     public org.bukkit.craftbukkit.entity.CraftLivingEntity getBukkitLivingEntity() { return (org.bukkit.craftbukkit.entity.CraftLivingEntity) super.getBukkitEntity(); } // Paper
     public boolean silentDeath = false; // Paper - mark entity as dying silently for cancellable death event
+    public boolean aiProcessed = false;
 
     @Override
     public float getBukkitYaw() {
@@ -2885,6 +2895,9 @@ public abstract class LivingEntity extends Entity {
 
     @Override
     public void tick() {
+        if (MinecraftServer.bypassAIThisTick) {
+            this.aiProcessed = false;
+        }
         super.tick();
         this.updatingUsingItem();
         this.updateSwimAmount();
@@ -3198,9 +3211,33 @@ public abstract class LivingEntity extends Entity {
             this.xxa = 0.0F;
             this.zza = 0.0F;
         } else if (this.isEffectiveAi()) {
-            this.level.getProfiler().push("newAi");
-            this.serverAiStep();
-            this.level.getProfiler().pop();
+            if (NFTWorldsConfig.limitPassiveMobs) {
+                if (this instanceof Villager) {
+                    if (this.tickCount % 2 == 0) {
+                        this.level.getProfiler().push("newAi");
+                        this.serverAiStep();
+                        this.level.getProfiler().pop();
+                    }
+                } else if (this instanceof Guardian || this instanceof ElderGuardian || (this instanceof Mob &&
+                        !(this instanceof Monster) &&
+                        !(this instanceof Phantom) &&
+                        !(this instanceof Horse) &&
+                        !(this instanceof net.minecraft.world.entity.player.Player))) {
+                    if (this.tickCount % 5 == 0) {
+                        this.level.getProfiler().push("newAi");
+                        this.serverAiStep();
+                        this.level.getProfiler().pop();
+                    }
+                } else {
+                    this.level.getProfiler().push("newAi");
+                    this.serverAiStep();
+                    this.level.getProfiler().pop();
+                }
+            } else {
+                this.level.getProfiler().push("newAi");
+                this.serverAiStep();
+                this.level.getProfiler().pop();
+            }
         }
 
         this.level.getProfiler().pop();
diff --git a/src/main/java/net/minecraft/world/entity/ai/Brain.java b/src/main/java/net/minecraft/world/entity/ai/Brain.java
index a7c71fc4e49079d11b9a0537a4f6d20bbbba815b..ef137d5c10ca6c07c054fe08d4d0695383f55862 100644
--- a/src/main/java/net/minecraft/world/entity/ai/Brain.java
+++ b/src/main/java/net/minecraft/world/entity/ai/Brain.java
@@ -14,6 +14,7 @@ import com.mojang.serialization.DynamicOps;
 import com.mojang.serialization.MapCodec;
 import com.mojang.serialization.MapLike;
 import com.mojang.serialization.RecordBuilder;
+import com.nftworlds.NFTWorldsConfig;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import java.util.Collection;
 import java.util.List;
@@ -26,6 +27,7 @@ import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import net.minecraft.Util;
 import net.minecraft.core.Registry;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.VisibleForDebug;
 import net.minecraft.world.entity.LivingEntity;
@@ -367,6 +369,16 @@ public class Brain<E extends LivingEntity> {
     }
 
     public void tick(ServerLevel world, E entity) {
+        if (NFTWorldsConfig.entityQueue && entity.aiProcessed) {
+            return;
+        }
+        if (NFTWorldsConfig.entityQueue && (System.currentTimeMillis() - MinecraftServer.tickStart >= NFTWorldsConfig.entityQueueMS)) {
+            if (!MinecraftServer.foundEnd) {
+                MinecraftServer.foundEnd = true;
+            }
+            return;
+        }
+        entity.aiProcessed = true;
         this.forgetOutdatedMemories();
         this.tickSensors(world, entity);
         this.startEachNonRunningBehavior(world, entity);
