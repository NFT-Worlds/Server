From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jacob <jacob@stellardev.org>
Date: Wed, 19 Jan 2022 17:51:01 -0700
Subject: [PATCH] Optimize Entity Ticking


diff --git a/src/main/java/com.nftworlds/NFTWorldsConfig.java b/src/main/java/com.nftworlds/NFTWorldsConfig.java
index 2c6fed325245c89e58327a9e4d764566ea4f71ec..ebf66556ec3b9c65a2dbfff3a10252a9eb3a0035 100644
--- a/src/main/java/com.nftworlds/NFTWorldsConfig.java
+++ b/src/main/java/com.nftworlds/NFTWorldsConfig.java
@@ -157,9 +157,43 @@ public class NFTWorldsConfig {
         maxEntitiesForCollisions = getInt("max-entities-for-collisions", 50);
     }
 
+    //Entity ticking
+    public static int ticksBetweenGeneralPathCreation;
+    public static int ticksBetweenEntityWaterMoveChecks;
+    public static int ticksBetweenCollisionChecks;
+    public static int ticksBetweenSlowMobCollisionChecks;
+    public static boolean optimizeEntityMovement;
+    public static boolean compensation;
     public static int ticksBetweenCollisions;
+    public static int entityActivationRangeDelay;
+    public static int ticksBetweenEntityDespawnChecks;
+    public static int ticksBetweenEntityStuckDamageCheck;
+    public static int ticksBetweenEntityWaterChecks;
+    public static boolean entitiesCreateWaterSplashParticles;
+    public static boolean entitiesPickUpItemsEnabled;
+    public static boolean entitiesPickUpItemsZombieAndSkeleBypass;
+    public static int ticksBetweenItemMergeSearch;
+    public static boolean disableMergeCheckOnItemMove;
+    public static boolean disableItemWaterParticlesCheck;
+
     private static void entityOptions() {
+        ticksBetweenGeneralPathCreation = getInt("entity.ticks-between-general-path-creation", 4);
+        ticksBetweenEntityWaterMoveChecks = getInt("entity.ticks-between-entity-water-move-checks", 4);
+        ticksBetweenCollisionChecks = getInt("entity.ticks-between-collision-checks", 1);
+        ticksBetweenSlowMobCollisionChecks = getInt("entity.ticks-between-slow-mob-collision-checks", 1);
+        optimizeEntityMovement = getBoolean("entity.optimize-entity-movement", true);
+        compensation = getBoolean("entity.compensation", true);
         ticksBetweenCollisions = getInt("entity.ticks-between-collisions", 5);
+        entityActivationRangeDelay = getInt("entity.activation-range-delay", 3);
+        ticksBetweenEntityDespawnChecks = getInt("entity.ticks-between-entity-despawn-checks", 7);
+        ticksBetweenEntityStuckDamageCheck = getInt("entity.ticks-between-entity-stuck-damage-check", 4);
+        ticksBetweenEntityWaterChecks = getInt("entity.ticks-between-entity-water-checks", 4);
+        entitiesCreateWaterSplashParticles = getBoolean("entity.entities-create-water-splash-particles", false);
+        entitiesPickUpItemsEnabled = getBoolean("entity.pick-up-items.enabled", true);
+        entitiesPickUpItemsZombieAndSkeleBypass = getBoolean("entity.pick-up-items.zombies-and-skeletons-bypass", true);
+        ticksBetweenItemMergeSearch = getInt("entity.item.ticks-between-merge-search", 25);
+        disableMergeCheckOnItemMove = getBoolean("entity.item.disable-merge-check-on-move", true);
+        disableItemWaterParticlesCheck = getBoolean("entity.item.disable-water-particles-check", true);
     }
 
     public static boolean disableMobCollisions = true;
@@ -267,4 +301,7 @@ public class NFTWorldsConfig {
         showDeathParticles = getBoolean("mob.show-death-particles", false);
     }
 
+    public static boolean optimizeSuffocationChecks = true;
+    private static void optimizeSuffocationChecks() { optimizeSuffocationChecks = getBoolean("optimize-suffocation-checks", true); }
+
 }
\ No newline at end of file
diff --git a/src/main/java/com.nftworlds/RecommendCommand.java b/src/main/java/com.nftworlds/RecommendCommand.java
index 930291428fcf0d72c6a5371eab031edb34b37c73..3e2cfb2fce5c2bf3eeee275fb617232582c61924 100644
--- a/src/main/java/com.nftworlds/RecommendCommand.java
+++ b/src/main/java/com.nftworlds/RecommendCommand.java
@@ -149,6 +149,57 @@ public class RecommendCommand extends Command {
             if (NFTWorldsConfig.showDeathParticles) {
                 changes.add("mob.show-death-particles §7|§f§o Change to §c§lFALSE");
             }
+            if (NFTWorldsConfig.ticksBetweenGeneralPathCreation < 4) {
+                changes.add("entity.ticks-between-general-path-creation §7|§f§o Change to §a§l4 or more");
+            }
+            if (!NFTWorldsConfig.compensation) {
+                changes.add("entity.compensation §7|§f§o Change to §a§lTRUE");
+            }
+            if (NFTWorldsConfig.ticksBetweenSlowMobCollisionChecks != 1) {
+                changes.add("entity.ticks-between-slow-mob-collision-checks §7|§f§o Change to §a§l1");
+            }
+            if (!NFTWorldsConfig.optimizeEntityMovement) {
+                changes.add("entity.optimize-entity-movement §7|§f§o Change to §a§lTRUE");
+            }
+            if (NFTWorldsConfig.ticksBetweenEntityWaterMoveChecks < 4) {
+                changes.add("entity.ticks-between-entity-water-move-checks §7|§f§o Change to §a§l4 or more");
+            }
+            if (NFTWorldsConfig.ticksBetweenCollisionChecks != 1) {
+                changes.add("entity.ticks-between-collision-checks §7|§f§o Change to §a§l1");
+            }
+            if (NFTWorldsConfig.entityActivationRangeDelay < 3) {
+                changes.add("entity.activation-range-delay §7|§f§o Change to §a§l3 or more");
+            }
+            if (NFTWorldsConfig.ticksBetweenEntityDespawnChecks < 7) {
+                changes.add("entity.ticks-between-entity-despawn-checks §7|§f§o Change to §a§l7 or more");
+            }
+            if (NFTWorldsConfig.ticksBetweenEntityStuckDamageCheck < 4) {
+                changes.add("entity.ticks-between-entity-stuck-damage-check §7|§f§o Change to §a§l4 or more");
+            }
+            if (NFTWorldsConfig.ticksBetweenEntityWaterChecks < 4) {
+                changes.add("entity.ticks-between-entity-water-checks §7|§f§o Change to §a§l4 or more");
+            }
+            if (NFTWorldsConfig.entitiesCreateWaterSplashParticles) {
+                changes.add("entity.entities-create-water-splash-particles §7|§f§o Change to §c§lFALSE");
+            }
+            if (!NFTWorldsConfig.entitiesPickUpItemsEnabled) {
+                changes.add("entity.pick-up-items.enabled §7|§f§o Change to §a§lTRUE");
+            }
+            if (NFTWorldsConfig.entitiesPickUpItemsZombieAndSkeleBypass) {
+                changes.add("entity.pick-up-items.zombies-and-skeletons-bypass §7|§f§o Change to §c§lFALSE");
+            }
+            if (NFTWorldsConfig.ticksBetweenItemMergeSearch < 25) {
+                changes.add("entity.item.ticks-between-merge-search §7|§f§o Change to §a§l25 or more");
+            }
+            if (!NFTWorldsConfig.disableMergeCheckOnItemMove) {
+                changes.add("entity.item.disable-merge-check-on-move §7|§f§o Change to §a§lTRUE");
+            }
+            if (!NFTWorldsConfig.disableItemWaterParticlesCheck) {
+                changes.add("entity.item.disable-water-particles-check §7|§f§o Change to §a§lTRUE");
+            }
+            if (!NFTWorldsConfig.optimizeSuffocationChecks) {
+                changes.add("optimize-suffocation-checks §7|§f§o Change to §a§lTRUE");
+            }
         } else if (config.equalsIgnoreCase("airplane")) { //Airplane
             if (!AirplaneConfig.dearEnabled) {
                 changes.add("dab.enabled §7|§f§o Change to §a§lTRUE");
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 807bbde533987b5a4d0b967c26b2cf323a4a90a3..6a808bfa28faac097dc8e28b41fff6416dc6758a 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -4,6 +4,7 @@ import com.google.common.annotations.VisibleForTesting;
 import co.aikar.timings.TimingHistory; // Paper
 import com.google.common.collect.Lists;
 import com.mojang.datafixers.DataFixer;
+import com.nftworlds.NFTWorldsConfig;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.longs.LongSet;
@@ -751,7 +752,9 @@ public class ServerLevel extends Level implements WorldGenLevel {
                 gameprofilerfiller.pop();
             }
 
-            org.spigotmc.ActivationRange.activateEntities(this); // Spigot
+            if (MinecraftServer.currentTick % NFTWorldsConfig.entityActivationRangeDelay == 0) {
+                org.spigotmc.ActivationRange.activateEntities(this); // Spigot
+            }
             timings.entityTick.startTiming(); // Spigot
             this.entityTickList.forEach((entity) -> {
                 if (!entity.isRemoved()) {
@@ -759,7 +762,9 @@ public class ServerLevel extends Level implements WorldGenLevel {
                         entity.discard();
                     } else {
                         gameprofilerfiller.push("checkDespawn");
-                        entity.checkDespawn();
+                        if (entity.tickCount % NFTWorldsConfig.ticksBetweenEntityDespawnChecks == 0) {
+                            entity.checkDespawn();
+                        }
                         gameprofilerfiller.pop();
                         Entity entity1 = entity.getVehicle();
 
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 90ee71d3a05427068f26992814bf8d4dcc51ef8d..f090d03bbbc8be50ad16ad798eb416090caad256 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -97,6 +97,7 @@ import net.minecraft.world.level.block.SoundType;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.border.WorldBorder;
+import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.dimension.DimensionType;
 import net.minecraft.world.level.entity.EntityAccess;
 import net.minecraft.world.level.entity.EntityInLevelCallback;
@@ -232,6 +233,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, n
     public float xRotO;
     private AABB bb;
     protected boolean onGround;
+    protected boolean isPlayer;
     public boolean horizontalCollision;
     public boolean verticalCollision;
     public boolean hurtMarked;
@@ -346,6 +348,20 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, n
     public final gg.airplane.entity.CollisionCache collisionCache = new gg.airplane.entity.CollisionCache(this);
     // Airplane end
 
+    //Solar start
+    public List<AABB> cachedCollisions = io.papermc.paper.util.CachedLists.getTempCollisionList();
+    public boolean hasChecked = false;
+    public boolean wasMoving = false;
+    public int justTeleported = 0;
+    public double previousY;
+    public double previousY2;
+
+    public boolean cachedInWall = false;
+    public boolean hasCheckedWall = false;
+
+    public long lastMovement;
+    //Solar End
+
     public float getBukkitYaw() {
         return this.yRot;
     }
@@ -516,6 +532,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, n
         this.level = world;
         this.dimensions = type.getDimensions();
         this.position = Vec3.ZERO;
+        this.previousY = this.previousY2 = position.y;
         this.blockPosition = BlockPos.ZERO;
         this.packetCoordinates = Vec3.ZERO;
         // Spigot start
@@ -757,7 +774,9 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, n
 
         this.wasInPowderSnow = this.isInPowderSnow;
         this.isInPowderSnow = false;
-        this.updateInWaterStateAndDoFluidPushing();
+        if (tickCount % NFTWorldsConfig.ticksBetweenEntityWaterMoveChecks == 0) {
+            this.updateInWaterStateAndDoFluidPushing();
+        }
         this.updateFluidOnEyes();
         this.updateSwimming();
         if (this.level.isClientSide) {
@@ -917,6 +936,10 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, n
         return this.onGround;
     }
 
+    public boolean isPlayer() {
+        return this.isPlayer;
+    }
+
     // Paper start - detailed watchdog information
     public final Object posLock = new Object(); // Paper - log detailed entity tick information
 
@@ -1278,7 +1301,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, n
             return moveVector;
         }
 
-        final List<AABB> potentialCollisions = io.papermc.paper.util.CachedLists.getTempCollisionList();
+        List<AABB> potentialCollisions = io.papermc.paper.util.CachedLists.getTempCollisionList();
         try {
             final double stepHeight = (double)this.maxUpStep;
             final AABB collisionBox;
@@ -1302,10 +1325,43 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, n
                 }
             }
 
-            // Airplane start - use collision cache
-            io.papermc.paper.util.CollisionUtil.getEntityCollisionsWithCache(world, this, collisionBox, potentialCollisions, false, true,
-                    false, false, null);
-            // Airplane end
+            double checkY = previousY;
+            previousY = this.position.y;
+            boolean hasYMovement = Math.abs(moveVector.y) >= 0.08 || checkY!=this.position.y;
+            if (hasYMovement || moveVector.x != 0 || moveVector.z != 0) {
+                this.lastMovement = System.currentTimeMillis();
+            }
+            if (tickCount % NFTWorldsConfig.ticksBetweenCollisionChecks == 0 || !hasChecked || hasYMovement) {
+                if (justTeleported > 0) justTeleported--;
+                boolean moving = hasYMovement || moveVector.x != 0 || moveVector.z != 0 || justTeleported > 0;
+                if (NFTWorldsConfig.optimizeEntityMovement && !moving && !wasMoving && hasChecked) {
+                    if (NFTWorldsConfig.compensation && tickCount % 20 == 0 && this.isOnGround() && !this.isPlayer()) { //Every second, check block below entity. Skip flying entities & players (because players tick themselves)
+                        if (this.level.getBlockState(this, new BlockPos(this.position.x, this.position.y - 1, this.position.z)).isAir()) { //If it's an air block, do collision checks for gravity
+                            io.papermc.paper.util.CollisionUtil.getEntityCollisionsWithCache(world, this, collisionBox, potentialCollisions, false, true, false, false, null);
+                            cachedCollisions = potentialCollisions;
+                            hasChecked = true;
+                        } else { //If the block is solid, continue with the cached blocks
+                            potentialCollisions = cachedCollisions;
+                        }
+                    } else {
+                        potentialCollisions = cachedCollisions;
+                    }
+                } else {
+                    //Slow moving mobs like axolotyls which are basically always moving can just tick every few ticks instead bc they're moving so slow anyways
+                    if (Math.abs(moveVector.x) < 0.01 && Math.abs(moveVector.z) < 0.01 && !hasYMovement && tickCount % NFTWorldsConfig.ticksBetweenSlowMobCollisionChecks != 0 && hasChecked) {
+                        potentialCollisions = cachedCollisions;
+                    } else {
+                        //System.out.println("Processing | movement is " + moveVector.x + " " + moveVector.y + " " + moveVector.z);
+                        io.papermc.paper.util.CollisionUtil.getEntityCollisionsWithCache(world, this, collisionBox, potentialCollisions, false, true,
+                                false, false, null);
+                        cachedCollisions = potentialCollisions;
+                        hasChecked = true;
+                    }
+                }
+                wasMoving = moving;
+            } else {
+                potentialCollisions = cachedCollisions;
+            }
 
             if (io.papermc.paper.util.CollisionUtil.isCollidingWithBorderEdge(world.getWorldBorder(), collisionBox)) {
                 io.papermc.paper.util.CollisionUtil.addBoxesToIfIntersects(world.getWorldBorder().getCollisionShape(), collisionBox, potentialCollisions);
@@ -2497,9 +2553,35 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, n
             AABB axisalignedbb = AABB.ofSize(this.getEyePosition(), (double) f, 1.0E-6D, (double) f);
 
             // Paper start
-            return io.papermc.paper.util.CollisionUtil.getEntityCollisionsWithCache(this.level, this, axisalignedbb, null, // Airplane - use cache
-                false, false, false, true, this.level.isAlmostSuffocating); // Airplane - don't allocate lambda here
-            // Paper end
+            double checkY = previousY2;
+            previousY2 = this.position.y;
+            if (NFTWorldsConfig.optimizeSuffocationChecks && this.moveVector != null) {
+                boolean inWallResult;
+                boolean hasYMovement = Math.abs(moveVector.y) >= 0.08 || checkY!=this.position.y;
+                if (tickCount % NFTWorldsConfig.ticksBetweenCollisionChecks == 0 || !hasCheckedWall || hasYMovement) {
+                    if (justTeleported > 0) justTeleported--;
+                    boolean moving = hasYMovement || moveVector.x != 0 || moveVector.z != 0 || justTeleported > 0;
+                    if (NFTWorldsConfig.optimizeEntityMovement && !moving && !wasMoving && hasCheckedWall) {
+                        inWallResult = cachedInWall;
+                    } else {
+                        if (Math.abs(moveVector.x) < 0.01 && Math.abs(moveVector.z) < 0.01 && !hasYMovement && tickCount % NFTWorldsConfig.ticksBetweenSlowMobCollisionChecks != 0 && hasCheckedWall) {
+                            inWallResult = cachedInWall;
+                        } else {
+                            inWallResult = io.papermc.paper.util.CollisionUtil.getEntityCollisionsWithCache(this.level, this, axisalignedbb, null, // Airplane - use cache
+                                    false, false, false, true, this.level.isAlmostSuffocating); // Airplane - don't allocate lambda here
+                            cachedInWall = inWallResult;
+                            hasCheckedWall = true;
+                        }
+                    }
+                    wasMoving = moving;
+                } else {
+                    inWallResult = cachedInWall;
+                }
+                return inWallResult;
+            } else {
+                return io.papermc.paper.util.CollisionUtil.getEntityCollisionsWithCache(this.level, this, axisalignedbb, null,
+                        false, false, false, true, this.level.isAlmostSuffocating); // Airplane - don't allocate lambda here
+            }
         }
     }
 
@@ -4005,6 +4087,10 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, n
                     vec3d = vec3d.normalize().scale(0.0045000000000000005D);
                 }
 
+                if (NFTWorldsConfig.ticksBetweenEntityWaterMoveChecks != 1) {
+                    vec3d = vec3d.scale(NFTWorldsConfig.ticksBetweenEntityWaterMoveChecks);
+                }
+
                 this.setDeltaMovement(this.getDeltaMovement().add(vec3d));
             }
 
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index bc53b0623089ecaae53d75e0f19831a4c1c9a5cd..81f06aae3abb4da750490714b0904c771cedabd2 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -401,17 +401,19 @@ public abstract class LivingEntity extends Entity {
         this.level.getProfiler().push("livingEntityBaseTick");
         boolean flag = this instanceof net.minecraft.world.entity.player.Player;
 
-        if (this.isAlive()) {
-            if (this.isInWall()) {
-                this.hurt(DamageSource.IN_WALL, 1.0F);
-            } else if (flag && !this.level.getWorldBorder().isWithinBounds(this.getBoundingBox())) {
-                double d0 = this.level.getWorldBorder().getDistanceToBorder((Entity) this) + this.level.getWorldBorder().getDamageSafeZone();
-
-                if (d0 < 0.0D) {
-                    double d1 = this.level.getWorldBorder().getDamagePerBlock();
-
-                    if (d1 > 0.0D) {
-                        this.hurt(DamageSource.IN_WALL, (float) Math.max(1, Mth.floor(-d0 * d1)));
+        if (tickCount % NFTWorldsConfig.ticksBetweenEntityStuckDamageCheck == 0) {
+            if (this.isAlive()) {
+                if (couldPossiblyBeHurt(1.0F) && this.isInWall()) {
+                    this.hurt(DamageSource.IN_WALL, 1.0F);
+                } else if (flag && !this.level.getWorldBorder().isWithinBounds(this.getBoundingBox())) {
+                    double d0 = this.level.getWorldBorder().getDistanceToBorder((Entity) this) + this.level.getWorldBorder().getDamageSafeZone();
+
+                    if (d0 < 0.0D) {
+                        double d1 = this.level.getWorldBorder().getDamagePerBlock();
+
+                        if (d1 > 0.0D) {
+                            this.hurt(DamageSource.IN_WALL, (float) Math.max(1, Mth.floor(-d0 * d1)));
+                        }
                     }
                 }
             }
@@ -423,39 +425,41 @@ public abstract class LivingEntity extends Entity {
 
         boolean flag1 = flag && ((net.minecraft.world.entity.player.Player) this).getAbilities().invulnerable;
 
-        if (this.isAlive()) {
-            if (this.isEyeInFluid((Tag) FluidTags.WATER) && !this.level.getBlockState(new BlockPos(this.getX(), this.getEyeY(), this.getZ())).is(Blocks.BUBBLE_COLUMN)) {
-                if (!this.canBreatheUnderwater() && !MobEffectUtil.hasWaterBreathing(this) && !flag1) {
-                    this.setAirSupply(this.decreaseAirSupply(this.getAirSupply()));
-                    if (this.getAirSupply() == -20) {
-                        this.setAirSupply(0);
-                        Vec3 vec3d = this.getDeltaMovement();
-
-                        for (int i = 0; i < 8; ++i) {
-                            double d2 = this.random.nextDouble() - this.random.nextDouble();
-                            double d3 = this.random.nextDouble() - this.random.nextDouble();
-                            double d4 = this.random.nextDouble() - this.random.nextDouble();
-
-                            this.level.addParticle(ParticleTypes.BUBBLE, this.getX() + d2, this.getY() + d3, this.getZ() + d4, vec3d.x, vec3d.y, vec3d.z);
+        if (tickCount % NFTWorldsConfig.ticksBetweenEntityWaterChecks == 0) {
+            if (this.isAlive()) {
+                if (this.isEyeInFluid((Tag) FluidTags.WATER) && !this.level.getBlockState(new BlockPos(this.getX(), this.getEyeY(), this.getZ())).is(Blocks.BUBBLE_COLUMN)) {
+                    if (!this.canBreatheUnderwater() && !MobEffectUtil.hasWaterBreathing(this) && !flag1) {
+                        this.setAirSupply(this.decreaseAirSupply(this.getAirSupply()));
+                        if (this.getAirSupply() == -20) {
+                            this.setAirSupply(0);
+                            if (NFTWorldsConfig.entitiesCreateWaterSplashParticles) {
+                                Vec3 vec3d = this.getDeltaMovement();
+                                for (int i = 0; i < 8; ++i) {
+                                    double d2 = this.random.nextDouble() - this.random.nextDouble();
+                                    double d3 = this.random.nextDouble() - this.random.nextDouble();
+                                    double d4 = this.random.nextDouble() - this.random.nextDouble();
+
+                                    this.level.addParticle(ParticleTypes.BUBBLE, this.getX() + d2, this.getY() + d3, this.getZ() + d4, vec3d.x, vec3d.y, vec3d.z);
+                                }
+                            }
+                            this.hurt(DamageSource.DROWN, 2.0F);
                         }
-
-                        this.hurt(DamageSource.DROWN, 2.0F);
                     }
-                }
 
-                if (!this.level.isClientSide && this.isPassenger() && this.getVehicle() != null && !this.getVehicle().rideableUnderWater()) {
-                    this.stopRiding();
+                    if (!this.level.isClientSide && this.isPassenger() && this.getVehicle() != null && !this.getVehicle().rideableUnderWater()) {
+                        this.stopRiding();
+                    }
+                } else if (this.getAirSupply() < this.getMaxAirSupply()) {
+                    this.setAirSupply(this.increaseAirSupply(this.getAirSupply()));
                 }
-            } else if (this.getAirSupply() < this.getMaxAirSupply()) {
-                this.setAirSupply(this.increaseAirSupply(this.getAirSupply()));
-            }
 
-            if (!this.level.isClientSide) {
-                BlockPos blockposition = this.blockPosition();
+                if (!this.level.isClientSide) {
+                    BlockPos blockposition = this.blockPosition();
 
-                if (!Objects.equal(this.lastPos, blockposition)) {
-                    this.lastPos = blockposition;
-                    this.onChangedBlock(blockposition);
+                    if (!Objects.equal(this.lastPos, blockposition)) {
+                        this.lastPos = blockposition;
+                        this.onChangedBlock(blockposition);
+                    }
                 }
             }
         }
@@ -4314,4 +4318,12 @@ public abstract class LivingEntity extends Entity {
         this.absMoveTo(d0, d1, d2, f, f1);
         this.setDeltaMovement((double) ((float) packet.getXd() / 8000.0F), (double) ((float) packet.getYd() / 8000.0F), (double) ((float) packet.getZd() / 8000.0F));
     }
+
+    public boolean couldPossiblyBeHurt(float amount) {
+        if ((float) this.invulnerableTime > (float) this.invulnerableDuration / 2.0F && amount <= this.lastHurt) {
+            return false;
+        }
+        return true;
+    }
+
 }
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index 81838f8f5aa04a8898d9544b8606d10bb49e5481..d90473f763971101881fc4c08d963194bee3e443 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -627,6 +627,11 @@ public abstract class Mob extends LivingEntity {
     @Override
     public void aiStep() {
         super.aiStep();
+        if (!NFTWorldsConfig.entitiesPickUpItemsEnabled) {
+            if (!(NFTWorldsConfig.entitiesPickUpItemsZombieAndSkeleBypass && (this.getType() == EntityType.ZOMBIE || this.getType() == EntityType.SKELETON))) {
+                return;
+            }
+        }
         this.level.getProfiler().push("looting");
         if (!this.level.isClientSide && this.canPickUpLoot() && this.isAlive() && !this.dead && this.level.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) {
             List<ItemEntity> list = this.level.getEntitiesOfClass(ItemEntity.class, this.getBoundingBox().inflate(1.0D, 0.0D, 1.0D));
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/FollowOwnerGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/FollowOwnerGoal.java
index d41016ab978c1ad4c3647157200966a7ad41679e..997e367fbb216b7199fed69b95f68b8570f6b416 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/FollowOwnerGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/FollowOwnerGoal.java
@@ -136,6 +136,7 @@ public class FollowOwnerGoal extends Goal {
             }
             to = event.getTo();
 
+            this.tamable.justTeleported = 6;
             this.tamable.moveTo(to.getX(), to.getY(), to.getZ(), to.getYaw(), to.getPitch());
             // CraftBukkit end
             this.navigation.stop();
diff --git a/src/main/java/net/minecraft/world/entity/ai/navigation/PathNavigation.java b/src/main/java/net/minecraft/world/entity/ai/navigation/PathNavigation.java
index 10505f32b71b723ed8dbfd9e1348a1691c9f7f18..94796f8d27c77542747751e4768dd2f3b27542dc 100644
--- a/src/main/java/net/minecraft/world/entity/ai/navigation/PathNavigation.java
+++ b/src/main/java/net/minecraft/world/entity/ai/navigation/PathNavigation.java
@@ -5,6 +5,8 @@ import java.util.Set;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
+
+import com.nftworlds.NFTWorldsConfig;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Vec3i;
@@ -135,6 +137,11 @@ public abstract class PathNavigation {
         return this.createPath(ImmutableSet.of(entity.blockPosition()), entity, 16, true, distance); // Paper
     }
 
+    @Nullable
+    public Path createPath(Entity entity, int distance, boolean attack) {
+        return this.createPath(ImmutableSet.of(entity.blockPosition()), entity, 16, true, distance, attack); // Paper
+    }
+
     @Nullable
     protected Path createPath(Set<BlockPos> positions, int range, boolean useHeadPos, int distance) {
         return this.createPath(positions, range, useHeadPos, distance, (float)this.mob.getAttributeValue(Attributes.FOLLOW_RANGE));
@@ -142,15 +149,24 @@ public abstract class PathNavigation {
 
     @Nullable
     protected Path createPath(Set<BlockPos> positions, int range, boolean useHeadPos, int distance, float followRange) {
-        return this.createPath(positions, null, range, useHeadPos, distance, (float) this.mob.getAttributeValue(Attributes.FOLLOW_RANGE));
+        return this.createPath(positions, null, range, useHeadPos, distance, (float) this.mob.getAttributeValue(Attributes.FOLLOW_RANGE), false);
     }
 
     @Nullable
     protected Path createPath(Set<BlockPos> positions, Entity target, int range, boolean useHeadPos, int distance) {
-        return this.createPath(positions, target, range, useHeadPos, distance, (float) this.mob.getAttributeValue(Attributes.FOLLOW_RANGE));
+        return this.createPath(positions, target, range, useHeadPos, distance, (float) this.mob.getAttributeValue(Attributes.FOLLOW_RANGE), false);
+    }
+
+    @Nullable
+    protected Path createPath(Set<BlockPos> positions, Entity target, int range, boolean useHeadPos, int distance, boolean attack) {
+        return this.createPath(positions, target, range, useHeadPos, distance, (float) this.mob.getAttributeValue(Attributes.FOLLOW_RANGE), attack);
     }
 
-    @Nullable protected Path createPath(Set<BlockPos> positions, Entity target, int range, boolean useHeadPos, int distance, float followRange) {
+    @Nullable
+    protected Path createPath(Set<BlockPos> positions, Entity target, int range, boolean useHeadPos, int distance, float followRange, boolean attack) {
+        if (!attack && this.path != null && this.mob.tickCount % NFTWorldsConfig.ticksBetweenGeneralPathCreation != 0) {
+            return this.path;
+        }
         // Paper end
         if (positions.isEmpty()) {
             return null;
diff --git a/src/main/java/net/minecraft/world/entity/item/ItemEntity.java b/src/main/java/net/minecraft/world/entity/item/ItemEntity.java
index d9cb47e469e1e6b8835f146c9a66907546a56e04..f3ef59d3fc34b2838973d667e43c2eca0879c38c 100644
--- a/src/main/java/net/minecraft/world/entity/item/ItemEntity.java
+++ b/src/main/java/net/minecraft/world/entity/item/ItemEntity.java
@@ -158,8 +158,10 @@ public class ItemEntity extends Entity {
             boolean flag = Mth.floor(this.xo) != Mth.floor(this.getX()) || Mth.floor(this.yo) != Mth.floor(this.getY()) || Mth.floor(this.zo) != Mth.floor(this.getZ());
             int i = flag ? 2 : 40;
 
-            if (this.tickCount % i == 0 && !this.level.isClientSide && this.isMergable()) {
-                this.mergeWithNeighbours();
+            if (((!NFTWorldsConfig.disableMergeCheckOnItemMove) && flag) || this.tickCount % NFTWorldsConfig.ticksBetweenItemMergeSearch == 0) {
+                if (this.tickCount % i == 0 && !this.level.isClientSide && this.isMergable()) {
+                    this.mergeWithNeighbours();
+                }
             }
 
             /* CraftBukkit start - moved up
@@ -168,12 +170,14 @@ public class ItemEntity extends Entity {
             }
             // CraftBukkit end */
 
-            this.hasImpulse |= this.updateInWaterStateAndDoFluidPushing();
-            if (!this.level.isClientSide) {
-                double d0 = this.getDeltaMovement().subtract(vec3d).lengthSqr();
+            if (!NFTWorldsConfig.disableItemWaterParticlesCheck) {
+                this.hasImpulse |= this.updateInWaterStateAndDoFluidPushing();
+                if (!this.level.isClientSide) {
+                    double d0 = this.getDeltaMovement().subtract(vec3d).lengthSqr();
 
-                if (d0 > 0.01D) {
-                    this.hasImpulse = true;
+                    if (d0 > 0.01D) {
+                        this.hasImpulse = true;
+                    }
                 }
             }
 
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index 05dcd51c561f9fedf4ee5891a378b0ba7d66d2c4..33f69da297a4139ba8fe8e56f22c341a416a1978 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -203,6 +203,8 @@ public abstract class Player extends LivingEntity {
         this.containerMenu = this.inventoryMenu;
         this.moveTo((double) pos.getX() + 0.5D, (double) (pos.getY() + 1), (double) pos.getZ() + 0.5D, yaw, 0.0F);
         this.rotOffs = 180.0F;
+        this.isPlayer = true;
+        this.lastMovement = System.currentTimeMillis();
     }
 
     public boolean blockActionRestricted(Level world, BlockPos pos, GameType gameMode) {
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 1353a36698b15020f1b1d067d405382ad66368a9..638f55032cff2c33623a8a21ab1e8f405f5eb961 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -16,6 +16,8 @@ import java.util.function.Consumer;
 import java.util.function.Predicate;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
+
+import com.nftworlds.NFTWorldsConfig;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
@@ -987,6 +989,23 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         }
     }
 
+    public BlockState getBlockState(Entity e, BlockPos pos) {
+        // CraftBukkit start - tree generation
+        if (this.captureTreeGeneration) {
+            CraftBlockState previous = this.capturedBlockStates.get(pos); // Paper
+            if (previous != null) {
+                return previous.getHandle();
+            }
+        }
+        // CraftBukkit end
+        if (this.isOutsideBuildHeight(pos)) {
+            return Blocks.VOID_AIR.defaultBlockState();
+        } else {
+            ChunkAccess chunk = this.getChunk(pos.getX() >> 4, pos.getZ() >> 4, ChunkStatus.FULL, true); // Paper - manually inline to reduce hops and avoid unnecessary null check to reduce total byte code size, this should never return null and if it does we will see it the next line but the real stack trace will matter in the chunk engine
+            return chunk.getBlockState(pos);
+        }
+    }
+
     @Override
     public FluidState getFluidState(BlockPos pos) {
         if (this.isOutsideBuildHeight(pos)) {
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index 3cc2cf10efbe05cf91876f760c786ab4d2217858..db3f65a0a37515a84e9e43957a16fc39cda0cadb 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -1,5 +1,6 @@
 package org.spigotmc;
 
+import com.nftworlds.NFTWorldsConfig;
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerChunkCache;
@@ -390,7 +391,7 @@ public class ActivationRange
         }
         // Paper end
 
-        boolean isActive = entity.activatedTick >= MinecraftServer.currentTick;
+        boolean isActive = entity.activatedTick + (NFTWorldsConfig.entityActivationRangeDelay == 1 ? 0 : NFTWorldsConfig.entityActivationRangeDelay) >= MinecraftServer.currentTick;
         entity.isTemporarilyActive = false; // Paper
 
         // Should this entity tick?
